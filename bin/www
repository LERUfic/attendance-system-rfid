#!/usr/bin/env node

/**
* Module dependencies.
*/

var app = require('../app');
var debug = require('debug')('test:server');
var http = require('http');
var net = require('net');
var zerorpc = require("zerorpc");

var sHost = "0.0.0.0";
var sPort = 8048;

/**
* Get port from environment and store in Express.
*/

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
* Create HTTP server.
*/

var server = http.createServer(app);
// var io=require("socket.io")(server);

/**
* Listen on provided port, on all network interfaces.
*/

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// var io = require('socket.io')();
// 	io.on('connection', function(client){});
// 	io.listen(3000);

// class Cid{
// 	set cid(cid){
// 		this._cid=cid;
// 	}
// 	get cid(){
// 		return this._cid;
// 	}
// }

// var myCid = new Cid;

// io.on( "connection", function( socket ) {
// 	socket.on( 'myCid', function( data ) {
// 		console.log("from client: "+data);
// 	});
// 	socket.on('send', function(data){
// 		socket.broadcast.emit('yourCid', myCid.cid);
// 	})
// });

// var Zserver = new zerorpc.Server({
//     attend: function(data, reply) {
// 		datax = "" + data;
// 		const ruang=datax.substr(0,3);
// 		const cid=datax.substr(3,16);
// 		const db = require('../db');

// 		console.log("cid: " + cid + "; ruang: " + ruang);

// 		if(ruang==="123"){
// 			var oi=require("socket.io")

// 			var socket = oi('127.0.0.1');
// 			myCid.cid=cid
// 			socket.emit('send', { my: 'data' });
// 			console.log("mycid: "+myCid.cid);
// 		}else{
			
// 			reply(null, "you has been attended.");
// 		}
// 	}
// });

// Zserver.bind("tcp://0.0.0.0:4242");

// Create a server instance, and chain the listen function to it
net.createServer(function(socket) {
	console.log('[*]incoming request from: ' + socket.remoteAddress +':'+ socket.remotePort);
	
	socket.on('data', function(datax) {
		var data = ""+ datax;
		const ruang = data.substr(0,3);
		const cid = data.substr(3,12);
		// console.log("cid: " + cid + "; ruang: " + ruang);
		const db = require('../db.js');

		db.query('SELECT nrp FROM mahasiswa WHERE card_id = ?', [cid], function(err, result) {
			if(err){
				if(err) throw err;
			}
			if(result.length>0){
				const nrp = result[0].nrp;
				db.query('SELECT id FROM kelas WHERE (ruang = ?) AND (jadwal_hari = DAYOFWEEK(CURDATE())) AND ((CURTIME()>=jam_mulai-10*60) OR (CURTIME()<=jam_selesai))', [ruang], function(err, res){
					if(err) throw err;
					if(res.length>0){
						db.query('INSERT INTO kehadiran(class_id, student_id) VALUES (?, ?)',[res[0].id, nrp], function(err){
							if(err) console.log(err);
							console.log('welcome ' + nrp);
						})
					}else{
						console.log('data not valid');
					}
				})
				socket.write('ruang: '+ ruang +'; nrp: '+nrp+'; card id: '+data.substr(3,16));
			}else{
				socket.write('failed');
			}
		});
	});
	
	socket.on('close', function(data) {
		console.log('Socket connection closed... ');
	});
}).listen(sPort, sHost);

console.log('Server(NET) listening on ' + '0.0.0.0' +':'+ 8048);


/**
* Normalize a port into a number, string, or false.
*/

function normalizePort(val) {
	var port = parseInt(val, 10);
	
	if (isNaN(port)) {
		// named pipe
		return val;
	}
	
	if (port >= 0) {
		// port number
		return port;
	}
	
	return false;
}

/**
* Event listener for HTTP server "error" event.
*/

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}
	
	var bind = typeof port === 'string'
	? 'Pipe ' + port
	: 'Port ' + port;
	
	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
		console.error(bind + ' requires elevated privileges');
		process.exit(1);
		break;
		case 'EADDRINUSE':
		console.error(bind + ' is already in use');
		process.exit(1);
		break;
		default:
		throw error;
	}
}

/**
* Event listener for HTTP server "listening" event.
*/

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string'
	? 'pipe ' + addr
	: 'port ' + addr.port;
	debug('Listening on ' + bind);
}
